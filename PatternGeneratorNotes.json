ok. so this started as a 3 part drum pattern generator but we have stumbled onto something more powerful. my intent was to use this with a multi-sample, generating a beat from 3 notes that were assigned a one-shot sample to play. the first problem is what if i don't want to play the samples on C, E and G? I would have to always prepare a multisample folder with the hits I want assigned to those available notes: C, E and G. If i pick a multi-sample made by someone else I probably won't like what ends up playing. Also since this script is generating note values already can't we just give it more notes to play. up to 8 voices at a time? this introduces another probability issue. right now we have 2 note polyphony. moving up to 8 notes requires us to rethink the probability logic for each voice. having 8 sliders to set the probability that note will hit is too much to handle and in the end probably not very useful anyway. and having that much polyphony doesn't make sense unless the script knew music theory it would most likely be a bunch of unrelated notes. Also if it is a melody maker how do we get it to stay in a scale. we would need a setting to handle that. But that doesn't make more than 2 note polyphony useful either since staying in the scale isn't enough to make a meaningful pattern out of 8 note polyphony. a scale and mode selector would solve this. the scale and mode sets the available notes for the leading voice and the mode derives the remaining voices options for notes. if we are in the key of c major and in the Ionian mode then the logic would make all the voices that are not the leading voice stick to the triad associated with that mode, the C major chord. now you have a melody playing with additional notes being added in a musically sensible manner. Then there's the issue with 8 note polyphony. you can't have all of them occupying the same octave. that gets crowded and there wouldn't be more than 4 notes playing at a time because the supporting voices only have three notes to choose from, in the case of the Major C scale in the Ionian mode that would just be C, E and G in that octave. The supporting voices need to spread out over the octaves up and down. So now we have a leading voice and a bunch of voices playing the C chord all of the time. if you are on an 8 bar pattern you have a boring supporting voice set. there needs to be a way to define melodic and chordal movement beyond the 8 bar loop. Another thing: there is counter melody. that would be a second voice that has more freedom than the other voices and fires more often. it doesn't have to stick to the same three notes (C, E and G in the present scenario). Lastly we need to address gate length. That could be modulated but you don't really get a pattern with just notes and random gates and you get a boring one with all the same gate lengths. sure you could use and lfo or whatever to make a random or repeating gate pattern. but it is decoupled from the saved patterns. so the gate pattern needs to be generated and saved as well. So in summary, we have a drum pattern generator that has evolved into something more powerful. It can generate a melody with up to 8 voices, staying within a scale and mode, and generating a counter melody. It also generates a gate pattern for each note. All of this is saved as one pattern. The last issue is this is a lot of settings. they need to be adjusted to create more variety but all those parameters makes a complicated machine and a tool that is never used isn't a tool. I propose this set of user adjustable parameters. First the keyboard method of saving patterns and restarting the explore mode ties the user to needing a keyboard to save slots. I think the ui should handle that and it won't have to draw a keyboard on screen. lets give the user a small list. the first parameter is a save slot, 0 - 99. the second item in the list is what is assigned to that save slot. if it is a pattern then it will show the bit values. if nothing is saved then the word explore is printed there instead. when you start on save slot zero for the first time it shows explore. when you hit the button it freezes goes to another pattern and the string displayed is "save?" if you like the pattern then it is saved to that slot on encoder push and it displays the shift register value. on the way explore behaves i don't think it should generate a new pattern and wait for you to tell it that you want a new one. it should play 4 cycles and move on. that is enough repeats for the user to recognize the pattern and make a decision on wether to store it or not. so when the string says "explore" the generator generates a new pattern every 4 bars or 16 measures. so now you have a save mechanism and a way for the user to go back to explore by selecting an new slot, and they don't have to babysit the explore button. now the user needs a way to specify how the note and gate generation. First there needs to be a density setting, this will set how many times the leading note plays. the second parameter will denote the counter melody density. the third parameter will denote the probability that the supporting voices will fire. there's the density section. the user needs to define the key and scale and mode. but there has to be a way for them to pick how much movement within the phrase out of the selected mode. this would be another density setting. on setting 0 it will stan strictly in the mode meaning the supporting voices will play the chord associated with that mode. as you move up however the likelyhood that all voices will shift together to other modes during the phrase will increase. Then there is the spread of the supporting voices. zero is within 2 octaves of the the middle of the piano. starting at middle c the two octavves up from that as defined by the scale, key and mode will define. as you increase that setting more octaves get included, setting 1 adds the octave below middle C. setting 2 adds the octave 3 octaves up from middle c. the third setting adds the octave 2 octaves below middle c and so on until the entire 88 keys are covered. another parameter will define the leading note drift. same settings. the next parameter will define the counter melody drift. right now just put these thoughts in an outline so i can see if there are any logical errors to the design.


first i think that the settings should be editable during explore mode and not when it is saved. those settings are a part of what makes the discovered pattern desirable. There also needs to be a setting to denote supporting voice freedom and base chord. it will extend up in voices. the first setting will be the tonic triad (1,3,5), the C major chord in the case of C major key and Ionian mode. the second setting will add the 7, B in this example, the third will add the 9, the forth will add the 11, and the 5th setting will add the 13. just like in primary jazz theory. also when going from a saved pattern to an empty pattern to explore the new explore should inherit the previous selected saved patterns setting as the new explore slots initial settings.